import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

class NewGroupPage extends StatefulWidget {
  const NewGroupPage({super.key});

  @override
  NewGroupPageState createState() => NewGroupPageState();
}

class NewGroupPageState extends State<NewGroupPage> {
  File? _groupImage;
  final _picker = ImagePicker();
  final TextEditingController _groupNameController = TextEditingController();
  final TextEditingController _searchController = TextEditingController();
  List<String> _selectedUsers = [];

  Future<void> _pickGroupImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _groupImage = File(pickedFile.path);
      });
    }
  }

  void _searchUsers() {
    setState(() {});
  }

  void _selectUser(String user) {
    setState(() {
      if (!_selectedUsers.contains(user)) {
        _selectedUsers.add(user);
      }
    });
  }

  void _unselectUser(String user) {
    setState(() {
      _selectedUsers.remove(user);
    });
  }

  void _createGroup() {
    print("Group Created with name: ${_groupNameController.text}, Users: $_selectedUsers");
    Navigator.pop(context);
  }

  Widget _buildSearchResults() {
    List<String> users = ['user1', 'user2', 'user3', 'user4'];

    return ListView.builder(
      shrinkWrap: true,
      itemCount: users.length,
      itemBuilder: (context, index) {
        String user = users[index];
        return ListTile(
          title: Text(user),
          onTap: () => _selectUser(user),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("New Group"),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        centerTitle: true,
        leading: IconButton(icon: const Icon(Icons.arrow_back), onPressed: () => Navigator.pop(context)),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              GestureDetector(
                onTap: _pickGroupImage,
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: _groupImage != null
                      ? FileImage(_groupImage!) as ImageProvider
                      : const NetworkImage("https://example.com/default_group_image.jpg"),
                ),
              ),
              const SizedBox(height: 10),
              _buildTextField(_groupNameController, "Group Name"),
              const SizedBox(height: 20),
              TextField(
                controller: _searchController,
                onChanged: (value) => _searchUsers(),
                decoration: InputDecoration(
                  labelText: "Search Users",
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                  contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                  prefixIcon: const Icon(Icons.search),
                ),
              ),
              const SizedBox(height: 10),
              _buildSearchResults(),
              const SizedBox(height: 10),
              _buildSelectedUsers(),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _createGroup,
                  child: const Text("Create Group"),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
          contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
        ),
      ),
    );
  }

  Widget _buildSelectedUsers() {
    return Wrap(
      spacing: 8.0,
      children: _selectedUsers.map((user) {
        return Chip(
          avatar: const CircleAvatar(
            backgroundImage: NetworkImage("https://example.com/default_user_image.jpg"),
          ),
          label: Text(user),
          deleteIcon: const Icon(Icons.close, size: 16),
          onDeleted: () => _unselectUser(user),
        );
      }).toList(),
    );
  }
}
